
<?php
// Tableau contenant la liste de courses
// Chaque Ã©lÃ©ment est un tableau associatif avec :
// - "nom" : le nom de l'article
// - "priorite" : niveau d'importance (1 = haute, 2 = moyenne, 3 = basse)
$liste = [
    ["nom" => "Pain", "priorite" => 1],
    ["nom" => "Lait", "priorite" => 2],
    ["nom" => "Tomates", "priorite" => 3],
    ["nom" => "PÃ¢tes", "priorite" => 2],
];

// On inverse l'ordre du tableau pour que
// le plus rÃ©cent apparaisse en haut de la liste
$liste = array_reverse($liste);
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Liste de courses</title>

    <!-- On lie le fichier CSS externe -->
    <link rel="stylesheet" href="../asset/css/style.css">
</head>
<body>
    <?php

   include '../includes/header.php';
    ?>
    <!-- Titre de la page -->
    <h2>ğŸ›’ Liste de courses</h2>

    <!-- Liste HTML sans puces -->
    <ul class="liste-courses">
        <?php 
        // On parcourt chaque Ã©lÃ©ment du tableau $liste
        foreach ($liste as $item): 
        ?>
            <!-- 
                On donne une classe "priorite-X" Ã  chaque Ã©lÃ©ment 
                en fonction de son niveau de prioritÃ© 
            -->
            <li class="priorite-<?php echo $item['priorite']; ?>">
                <!-- On affiche le nom de l'article, en le protÃ©geant avec htmlspecialchars -->
                <?php echo htmlspecialchars($item['nom']); ?>
            </li>
        <?php endforeach; ?>
    </ul>

</body>
=======
// ===================================
// DÃ‰FINITION DU TABLEAU DES COURSES
// ===================================
// On crÃ©e une variable nommÃ©e $listesCourses.
// Cette variable contient un tableau (array) principal.
// Ce tableau regroupe plusieurs "listes de courses", sous forme de tableaux associatifs (clÃ© => valeur).

$listesCourses = [
    [
        //    listes de courses
        "titre" => "Courses maison",        // Le titre de la liste
        "priorite" => 1,                    // PrioritÃ© haute 
        "articles" => [                     // Liste des articles 
            "Pain",
            "Lait",
            "Tomates",
            "PÃ¢tes",
            "Riz",
            "Pomme"
        ]
    ],
    [

        "titre" => "Courses barbecue",
        "priorite" => 2,                    // PrioritÃ© moyenne
        "articles" => [
            "Viande",
            "Charbon",
            "Sauce barbecue",
            "Salade",
            "BiÃ¨re"
        ]
    ],
    [

        "titre" => "Courses pique-nique",
        "priorite" => 3,                    // PrioritÃ© faible 
        "articles" => [
            "Sandwichs",
            "Chips",
            "Jus de fruits",
            "Serviettes"
        ]
    ]
];
?>
<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Listes de courses</title>
    <link rel="stylesheet" href="../asset/css/style.css">
</head>

<body>

    <?php
    // =====================================
    // BOUCLE PHP POUR AFFICHER CHAQUE LISTE
    // =====================================
    // On parcourt le tableau $listesCourses avec une boucle foreach.
    // Ã€ chaque tour de boucle, la variable $liste contient UNE des 3 listes dÃ©finies plus haut.

    foreach ($listesCourses as $liste): ?>

        <!-- Chaque liste est affichÃ©e dans une balise <section> -->
        <!-- On attribue dynamiquement une classe CSS basÃ©e sur la prioritÃ© -->
        <!-- Exemple : <section class="priorite-1"> ou priorite-2, etc. -->
        <section class="priorite-<?php echo $liste['priorite']; ?>">

            <!-- Titre de la liste (ex: "Courses maison") -->
            <!-- htmlspecialchars() empÃªche quâ€™un code HTML ou JavaScript soit injectÃ© -->
            <h2><?php echo htmlspecialchars(trim($liste['titre'])); ?> ğŸ›’</h2>

            <!-- On crÃ©e une liste HTML <ul> qui contiendra tous les articles -->
            <ul class="liste-courses">

                <?php
                // =============================
                // BOUCLE POUR LES ARTICLES
                // =============================
                // On parcourt chaque Ã©lÃ©ment du tableau d'articles avec une autre boucle foreach.
                // $article contiendra Ã  chaque tour un nom dâ€™article (ex: "Pain", "Viande", etc.)
                foreach ($liste['articles'] as $article): ?>

                    <!-- On affiche chaque article dans une balise <li> (Ã©lÃ©ment de liste) -->
                    <!-- Encore une fois, on protÃ¨ge avec htmlspecialchars() pour Ã©viter les caractÃ¨res spÃ©ciaux non sÃ©curisÃ©s -->
                    <li><?php echo htmlspecialchars(trim($article)); ?></li>

                <?php endforeach; ?>
            </ul>

        </section>

    <?php endforeach; ?>

</body>

</html>